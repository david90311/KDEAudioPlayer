//
//  AudioItemEventProducer.swift
//  AudioPlayer
//
//  Created by Kevin DELANNOY on 13/03/16.
//  Copyright Â© 2016 Kevin Delannoy. All rights reserved.
//

import Foundation

// MARK: - AudioItem+KVO

extension AudioItem {
    /// The list of properties that is observed through KVO.
    private static var ap_KVOProperties: [String] {
        return ["artist", "title", "album", "trackCount", "trackNumber", "artworkImage"]
    }
}

// MARK: - PlayerEventProducer

/**
 *  An `AudioItemEventProducer` generates event when a property of an `AudioItem` has changed.
 */
class AudioItemEventProducer: NSObject, EventProducer {
    /**
     An `AudioItemEvent` gets generated by `AudioItemEventProducer` when a property of `AudioItem`
     changes.

     - UpdatedArtist:       `artist` was updated.
     - UpdatedTitle:        `title` was updated.
     - UpdatedAlbum:        `album` was updated.
     - UpdatedTrackCount:   `trackCount` was updated.
     - UpdatedTrackNumber:  `trackNumber` was updated.
     - UpdatedArtworkImage: `artworkImage` was updated.
     */
    enum AudioItemEvent: Event {
        case UpdatedArtist
        case UpdatedTitle
        case UpdatedAlbum
        case UpdatedTrackCount
        case UpdatedTrackNumber
        case UpdatedArtworkImage
    }

    /// The player to produce events with.
    /// Note that setting it has the same result as calling `stopProducingEvents`.
    var item: AudioItem? {
        willSet {
            stopProducingEvents()
        }
    }

    /// The listener that will be alerted a new event occured.
    weak var eventListener: EventListener?

    /// A boolean value indicating whether we're currently listening to events on the player.
    private var listening = false

    /**
     Stops producing events on deinitialization.
     */
    deinit {
        stopProducingEvents()
    }

    /**
     Starts listening to the player events.
     */
    func startProducingEvents() {
        guard let item = item where !listening else {
            return
        }

        //Observing AudioItem's property
        for keyPath in AudioItem.ap_KVOProperties {
            item.addObserver(self, forKeyPath: keyPath, options: .New, context: nil)
        }

        listening = true
    }

    /**
     Stops listening to the player events.
     */
    func stopProducingEvents() {
        guard let item = item where listening else {
            return
        }

        //Unobserving AudioItem's property
        for keyPath in AudioItem.ap_KVOProperties {
            item.removeObserver(self, forKeyPath: keyPath)
        }

        listening = false
    }

    /**
     This message is sent to the receiver when the value at the specified key path relative
     to the given object has changed. The receiver must be registered as an observer for the
     specified `keyPath` and `object`.

     - parameter keyPath: The key path, relative to `object`, to the value that has changed.
     - parameter object:  The source object of the key path `keyPath`.
     - parameter change:  A dictionary that describes the changes that have been made to the value
        of the property at the key path `keyPath` relative to `object`. Entries are described in
        Change Dictionary Keys.
     - parameter context: The value that was provided when the receiver was registered to receive
        key-value observation notifications.
     */
    override func observeValueForKeyPath(keyPath: String?, ofObject object: AnyObject?,
        change: [String : AnyObject]?, context: UnsafeMutablePointer<Void>) {
            if let keyPath = keyPath {
                switch keyPath {
                case "artist":
                    eventListener?.onEvent(AudioItemEvent.UpdatedArtist, generetedBy: self)

                case "title":
                    eventListener?.onEvent(AudioItemEvent.UpdatedTitle, generetedBy: self)

                case "album":
                    eventListener?.onEvent(AudioItemEvent.UpdatedAlbum, generetedBy: self)

                case "trackCount":
                    eventListener?.onEvent(AudioItemEvent.UpdatedTrackCount, generetedBy: self)

                case "trackNumber":
                    eventListener?.onEvent(AudioItemEvent.UpdatedTrackNumber, generetedBy: self)

                case "artworkImage":
                    eventListener?.onEvent(AudioItemEvent.UpdatedArtworkImage, generetedBy: self)

                default:
                    break
                }
            }
    }
}
